import { useEmail } from "@/stores/use-email";
import { ArrowLeftIcon, CodeIcon, DownloadIcon } from "lucide-react";
import { useEffect, useState } from "react";
import { Button } from "../ui/button";
import { Steps } from "@/lib/types";
import { CodePreviewModal } from "../molecules/code-preview-modal";

export const Preview = ({ onNext }: { onNext: (step: Steps) => void }) => {
  const { generatedHtml, fragments } = useEmail();
  const [processedHtml, setProcessedHtml] = useState<string>("");
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const processHtml = async () => {
      if (!generatedHtml || fragments.length === 0) return;

      let html = generatedHtml;

      const fileToDataUrl = (file: File): Promise<string> => {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result as string);
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
      };

      for (const fragment of fragments) {
        try {
          const dataUrl = await fileToDataUrl(fragment.file);
          const baseName = fragment.id.replace(/\.[^/.]+$/, "");
          const regex = new RegExp(`src=["'](?:[^"']*/)?${baseName}(?:\\.[^"']*)?["']`, "g");
          html = html.replace(regex, `src="${dataUrl}"`);
        } catch (error) {
          console.error(`Error processing fragment ${fragment.id}:`, error);
        }
      }

      setProcessedHtml(html);
    };

    processHtml();
  }, [generatedHtml, fragments]);

  const handleDownload = () => {
    const blob = new Blob([processedHtml], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "email.html";
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section>
      <div className="space-y-1 my-8">
        <h2 className="text-[#0d141c] tracking-light text-[28px] font-bold leading-tight">
          Your email is generated!
        </h2>
        <p className="text-[#0d141c] text-base font-normal leading-normal">
          This email was generated by an AI agent.
        </p>
      </div>

      <div className="border rounded-lg overflow-hidden">
        <iframe
          srcDoc={processedHtml}
          className="w-full h-[600px]"
          title="Email Preview"
        />
      </div>

      <div className="flex justify-center items-center gap-4 mt-5">
        <Button onClick={() => onNext(Steps.CUT_IMAGE)}>
          <ArrowLeftIcon className="w-4 h-4 mr-2" />
          Back to cut image
        </Button>
        <Button onClick={() => setIsModalOpen(true)}>
          <CodeIcon className="w-4 h-4 mr-2" />
          View Code
        </Button>
        <Button onClick={handleDownload}>
          <DownloadIcon className="w-4 h-4 mr-2" />
          Download HTML
        </Button>
      </div>

      <CodePreviewModal
        code={processedHtml}
        open={isModalOpen}
        onOpenChange={setIsModalOpen}
      />
    </section>
  );
};
